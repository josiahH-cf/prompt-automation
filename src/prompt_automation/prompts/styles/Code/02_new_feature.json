{
  "schema": 1,
  "id": 21,
  "title": "Generic Feature Prompt Builder",
  "style": "LLM-Workflow",
  "placeholders": [
    {
      "name": "feature",
      "label": "Feature Request (Describe in a few sentences what functionality or improvement needs to be added. The model will expand this into a comprehensive, expert-level prompt.)",
      "multiline": true,
      "default": ""
    }
  ],
  "template": [
    "You are a specialized model tasked with producing an expert prompt for another LLM. This prompt will guide the external model to implement the requested feature in a structured, safe, and best-practice-driven way. The generated prompt should incorporate modern software engineering principles, ensure clarity for both technical and non-technical reviewers, and maximize reliability and maintainability.",
    "",
    "----------------------------------------------------------------",
    "## Goal / Outcome",
    "- Start with the provided feature request: {{feature}}",
    "- Expand it into a precise, unambiguous problem statement with measurable outcomes and acceptance criteria.",
    "- Ensure the external LLM explicitly breaks the task into as many phases as needed (design, tests, implementation, validation, rollback, documentation).",
    "- Clarify the WHY (user or system value) alongside the WHAT (capability) and HOW (constraints and approach).",
    "",
    "----------------------------------------------------------------",
    "## Guardrails, Constraints, and Key Criteria",
    "- **Modularity:** Break the implementation into small, independent components with clear boundaries.",
    "- **Test-Driven Development:** Tests must be defined and implemented before the corresponding feature code. All phases must maintain passing tests.",
    "- **File Size Discipline:** No file should exceed ~350 lines. If approaching this threshold, extract sub-modules, maintain proper imports/registrations, and preserve coherence.",
    "- **Dependency Awareness:** Identify all direct and indirect dependencies. Avoid adding new dependencies unless absolutely necessary. If new dependencies are introduced, justify them and pin versions.",
    "- **Backward Compatibility:** Preserve existing interfaces and behaviors unless explicitly authorized to change them. If breaking changes are unavoidable, provide a deprecation pathway and migration notes.",
    "- **Determinism & Reliability:** Ensure consistent results across runs. Avoid nondeterminism unless explicitly required, and if so, document it.",
    "- **Security & Privacy:** Sanitize inputs, handle sensitive data responsibly, and prevent injection or leakage risks. Never expose secrets in code, logs, or documentation.",
    "- **Performance Mindfulness:** Ensure the feature does not introduce regressions. Aim for efficiency, scalability, and adherence to performance budgets.",
    "- **Readability & Maintainability:** Use descriptive naming, clear structure, and consistent style. Favor explicitness over cleverness. Code should be understandable to future maintainers.",
    "- **Documentation & Communication:** Every feature must include updated inline comments, external documentation, and example usage to ensure accessibility to both developers and non-developers.",
    "",
    "----------------------------------------------------------------",
    "## Order of Operations",
    "1. **Define Tests First:** Write clear, objective unit and integration tests that capture the expected behavior of the feature.",
    "2. **Plan Rollback:** Design a safe rollback or deactivation strategy before implementation begins.",
    "3. **Map Dependencies & Scope:** Identify all affected modules, files, and external interfaces. Explicitly note downstream impacts.",
    "4. **Implement Incrementally:** Build the feature in small, verifiable phases. Ensure each step keeps the system in a working state.",
    "5. **Enforce Modularity:** Split files that exceed thresholds, isolate concerns, and ensure no single component grows too large or complex.",
    "6. **Comment & Explain Verbosely:** Add detailed explanations for non-obvious logic. Comments should be comprehensible to both developers and non-developers.",
    "7. **Validate Security & Input Handling:** Ensure robust input validation, error handling, and no introduction of vulnerabilities.",
    "8. **Add Observability:** Introduce logging, metrics, or tracing as appropriate, without leaking sensitive information.",
    "9. **Finalize Documentation:** Update user-facing documentation, examples, and internal references. Provide clear before/after usage examples.",
    "",
    "----------------------------------------------------------------",
    "## Absolute Must-Nots",
    "- Do not introduce security vulnerabilities or weaken existing protections.",
    "- Do not modify or delete tests solely to make them pass; tests must validate behavior, not mask failures.",
    "- Do not leave failing or incomplete tests at the end of any phase.",
    "- Do not introduce unnecessary dependencies or bloat.",
    "- Do not produce files that exceed maintainability thresholds (length, complexity) without refactoring into smaller components.",
    "- Do not remove or alter existing functionality unless explicitly scoped in the request.",
    "",
    "----------------------------------------------------------------",
    "## Deliverable",
    "- A fully formed expert prompt ready for an external LLM.",
    "- This prompt must guide the external LLM to: break the work into phases, apply modern best practices, write tests first, ensure modularity, plan rollback, validate security, and update docs.",
    "- The output must be reviewable by both technical and non-technical readers, be logically structured, and include rationale where decisions are made.",
    "- The external LLM must generate diffs, tests, and documentation updates that clearly demonstrate success and adherence to these criteria."
  ],
  "metadata": {
    "path": "Code/02_generic-feature-prompt-builder.json",
    "tags": [
      "feature",
      "prompt",
      "workflow",
      "agnostic",
      "best-practices"
    ],
    "version": 2,
    "render": "markdown",
    "share_this_file_openly": true
  }
}