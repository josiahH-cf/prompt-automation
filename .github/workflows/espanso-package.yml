name: Espanso Package CI
on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validate package layout
        run: |
          test -d packages/your-pa
          ls -1 packages/your-pa | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | grep .
          latest=$(ls -1 packages/your-pa | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          test -f "packages/your-pa/$latest/_manifest.yml"
          test -f "packages/your-pa/$latest/package.yml"
          test -d "packages/your-pa/$latest/match"
name: Espanso Package CI

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:
    inputs:
      new_version:
        description: "New espanso package version (semver)"
        required: false
        type: string

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pyyaml

      - name: Run espanso package tests only
        run: pytest -q tests/espanso

  release:
    if: ${{ inputs.new_version != '' }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PyYAML
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Bump espanso package version in _manifest.yml
        run: |
          python - << 'PY'
          import sys, yaml, pathlib
          root = pathlib.Path('.').resolve()
          path = root / 'espanso-package' / '_manifest.yml'
          data = yaml.safe_load(path.read_text())
          data['version'] = '${{ inputs.new_version }}'
          path.write_text(yaml.safe_dump(data, sort_keys=False))
          print(f"Bumped version to {data['version']} in {path}")
          PY

      - name: Mirror to external packages layout
        run: |
          python - << 'PY'
          import pathlib, shutil, yaml
          repo = pathlib.Path('.').resolve()
          src_dir = repo / 'espanso-package'
          man = yaml.safe_load((src_dir / '_manifest.yml').read_text())
          name = man['name']
          ver = man['version']
          ext_dir = repo / 'packages' / name / ver
          (ext_dir / 'match').mkdir(parents=True, exist_ok=True)
          # Write manifest
          (ext_dir / '_manifest.yml').write_text((src_dir / '_manifest.yml').read_text())
          # Copy package.yml if present
          pkg_yml = src_dir / 'package.yml'
          if pkg_yml.exists():
            shutil.copy2(pkg_yml, ext_dir / 'package.yml')
          # Copy matches
          for p in (src_dir / 'match').glob('*.yml'):
            shutil.copy2(p, ext_dir / 'match' / p.name)
          # README (lightweight)
          readme = ext_dir / 'README.md'
          if not readme.exists():
            readme.write_text(f"# {name}\n\nMirrored from espanso-package/ for version {ver}.\n")
          print(f"Mirrored espanso package to {ext_dir}")
          PY

      - name: Commit changes and tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add espanso-package/_manifest.yml packages
          git commit -m "chore(espanso): release ${{ inputs.new_version }}"
          git tag -a "espanso-v${{ inputs.new_version }}" -m "Espanso package ${{ inputs.new_version }}"
          git push --follow-tags
